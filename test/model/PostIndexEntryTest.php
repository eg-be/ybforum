<?php declare(strict_types=1);
use PHPUnit\Framework\TestCase;

require_once __DIR__.'/../BaseTest.php';
require_once __DIR__.'/../../src/model/PostIndexEntry.php';


/**
 * Requires a valid database to connect to, as we
 * want to really test the executed sql.
 * 
 * See README.md located in this directory, on how
 * to setup the test-database.
 * 
 */
final class PostIndexEntryTest extends BaseTest
{
/*    private ForumDb $db;

    public static function setUpBeforeClass(): void
    {
        // This tests will not modify the db, its enough to re-create
        // the test-db before running all tests from this class
        BaseTest::createTestDatabase();
    }

    protected function setUp(): void
    {
        $this->db = new ForumDb();
    }

    protected function assertPreConditions(): void
    {
        $this->assertTrue($this->db->IsConnected());
    }

    /**
     * @Test
     * Just a dummy to avoid a warning because we have no tests yet
     */
    /*public function testDummy(): void
    {
        // todo: fixme
        $this->assertTrue(true);
    }*/

    // TODO; This shit has been generated by copilot, fix it
    public function testLoadThreadIndexEntries(): void
    {
        $dbMock = $this->createMock(ForumDb::class);
        $dbMock->method('IsConnected')->willReturn(true);

        $stmtMock = $this->createMock(PDOStatement::class);
        $stmtMock->method('fetchObject')
            ->willReturnOnConsecutiveCalls(
                (object)['idthread' => 1, 'hidden' => 0, 'indent' => 0],
                (object)['idthread' => 1, 'hidden' => 0, 'indent' => 1],
                false
            );

        $dbMock->method('prepare')->willReturn($stmtMock);

        $callbackInvoked = false;
        $callback = function ($entries) use (&$callbackInvoked) {
            $this->assertCount(2, $entries);
            $callbackInvoked = true;
        };

        PostIndexEntry::LoadThreadIndexEntries($dbMock, 10, 100, $callback);
        $this->assertTrue($callbackInvoked);
    }

    /*
    public function testLoadPostReplies(): void
    {
        $dbMock = $this->createMock(ForumDb::class);
        $dbMock->method('prepare')->willReturn($this->createMock(PDOStatement::class));

        $postMock = $this->createMock(Post::class);
        $postMock->method('GetThreadId')->willReturn(1);
        $postMock->method('GetIndent')->willReturn(0);
        $postMock->method('GetRank')->willReturn(0);

        $stmtMock = $this->createMock(PDOStatement::class);
        $stmtMock->method('fetchObject')
            ->willReturnOnConsecutiveCalls(
                (object)['indent' => 1, 'parent_idpost' => 1, 'hidden' => 0],
                false
            );

        $dbMock->method('prepare')->willReturn($stmtMock);

        $replies = PostIndexEntry::LoadPostReplies($dbMock, $postMock);
        $this->assertCount(1, $replies);
    }

    public function testLoadRecentPosts(): void
    {
        $dbMock = $this->createMock(ForumDb::class);

        $stmtMock = $this->createMock(PDOStatement::class);
        $stmtMock->method('fetchObject')
            ->willReturnOnConsecutiveCalls(
                (object)['idpost' => 1, 'hidden' => 0],
                (object)['idpost' => 2, 'hidden' => 0],
                false
            );

        $dbMock->method('prepare')->willReturn($stmtMock);

        $recentPosts = PostIndexEntry::LoadRecentPosts($dbMock, 2);
        $this->assertCount(2, $recentPosts);
    }

    public function testGetters(): void
    {
        $reflection = new ReflectionClass(PostIndexEntry::class);
        $constructor = $reflection->getConstructor();
        $constructor->setAccessible(true);

        $entry = $reflection->newInstanceWithoutConstructor();
        $constructor->invoke($entry);

        $reflection->getProperty('idpost')->setValue($entry, 1);
        $reflection->getProperty('idthread')->setValue($entry, 1);
        $reflection->getProperty('parent_idpost')->setValue($entry, null);
        $reflection->getProperty('nick')->setValue($entry, 'testuser');
        $reflection->getProperty('title')->setValue($entry, 'Test Title');
        $reflection->getProperty('indent')->setValue($entry, 0);
        $reflection->getProperty('creation_ts')->setValue($entry, '2023-01-01 00:00:00');
        $reflection->getProperty('hidden')->setValue($entry, 0);

        $this->assertEquals(1, $entry->GetPostId());
        $this->assertEquals(0, $entry->GetIndent());
        $this->assertEquals('Test Title', $entry->GetTitle());
        $this->assertEquals('testuser', $entry->GetNick());
        $this->assertFalse($entry->IsHidden());
    }*/
}